datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model LastSeen {
  id        Int      @default(autoincrement()) @id
  userId    String   @unique
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Karma {
  id        Int      @default(autoincrement()) @id
  guildId   String
  userId    String
  karma     Int      @default(0)
  lastUsage DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
}

model Reply {
  id        Int      @default(autoincrement()) @id
  guildId   String
  trigger   String
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        Int      @default(autoincrement()) @id
  userId    String
  name      String
  values    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model Setting {
  id        Int      @default(autoincrement()) @id
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quote {
  id        Int      @default(autoincrement()) @id
  guildId   String
  quote     String
  addedBy   String
  channel   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuildSnapshot {
  id        Int      @default(autoincrement()) @id
  snapshot  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuildSetting {
  id           Int              @default(autoincrement()) @id
  guildId      String           @unique
  mute         Int
  ignoredUsers IgnoredUser[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  commands     EnabledCommand[]
}

model EnabledCommand {
  id             Int             @default(autoincrement()) @id
  guildSetting   GuildSetting    @relation(fields: [guildSettingId], references: [id])
  guildSettingId Int
  name           String
  enabled        Boolean
  configs        CommandConfig[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([guildSettingId, name])
}

model CommandConfig {
  id        Int            @default(autoincrement()) @id
  command   EnabledCommand @relation(fields: [commandId], references: [id])
  commandId Int
  key       String
  value     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([commandId, key])
}

model IgnoredUser {
  id             Int          @default(autoincrement()) @id
  guildSetting   GuildSetting @relation(fields: [guildSettingId], references: [id])
  guildSettingId Int
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([guildSettingId, userId])
}

model Analytic {
  id        Int      @default(autoincrement()) @id
  action    String
  category  String
  label     String
  context   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
