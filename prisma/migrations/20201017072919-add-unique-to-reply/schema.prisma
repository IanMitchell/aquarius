datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["atomicNumberOperations"]
}

model LastSeen {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("last_seen")
}

model Karma {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  karma     Int      @default(0)
  lastUsage DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
  @@index([guildId, userId])
  @@map("karma")
}

model Reply {
  id        Int      @id @default(autoincrement())
  guildId   String
  trigger   String
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guildId, trigger])
  @@index([guildId, trigger])
  @@map("replies")
}

model Service {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  values    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId, name])
  @@map("linked_services")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("settings")
}

model Quote {
  id        Int      @id @default(autoincrement())
  guildId   String
  quote     String
  quoteId   Int
  addedBy   String
  channel   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guildId, quoteId])
  @@index(guildId)
  @@map("quotes")
}

model Snapshot {
  id        Int      @id @default(autoincrement())
  snapshot  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("snapshots")
}

model GuildSetting {
  id           Int              @id @default(autoincrement())
  guildId      String           @unique
  mute         Int?
  ignoredUsers IgnoredUser[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  commands     EnabledCommand[]

  @@index([guildId])
  @@map("guild_settings")
}

model EnabledCommand {
  id             Int             @id @default(autoincrement())
  guildSetting   GuildSetting    @relation(fields: [guildSettingId], references: [id])
  guildSettingId Int
  name           String
  enabled        Boolean
  configs        CommandConfig[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([guildSettingId, name])
  @@map("enabled_commands")
}

model CommandConfig {
  id        Int            @id @default(autoincrement())
  command   EnabledCommand @relation(fields: [commandId], references: [id])
  commandId Int
  key       String
  value     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([commandId, key])
  @@map("command_configs")
}

model IgnoredUser {
  id             Int          @id @default(autoincrement())
  guildSetting   GuildSetting @relation(fields: [guildSettingId], references: [id])
  guildSettingId Int
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([guildSettingId, userId])
  @@map("ignored_users")
}

model Analytic {
  id        Int      @id @default(autoincrement())
  action    String
  category  String
  label     String
  context   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([action])
  @@map("analytic_events")
}

model BanList {
  id        Int      @id @default(autoincrement())
  guildId   String   @unique
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId])
  @@map("guild_bans")
}
